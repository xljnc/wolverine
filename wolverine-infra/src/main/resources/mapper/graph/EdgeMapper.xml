<mapper namespace="com.wt.test.wolverine.infra.graph.dao.EdgeMapper">
    <insert id="createEdge">
        INSERT EDGE IF NOT EXISTS ${ edge.type } (ctime)
        VALUES '${ edge.fromVertexId }' -> '${ edge.toVertexId }' : (${ edge.createTime })
    </insert>

    <delete id="deleteEdge">
        DELETE EDGE ${ edge.type } '${ edge.fromVertexId }' -> '${ edge.toVertexId }'
    </delete>

    <select id="getEdge" resultType="com.wt.test.wolverine.infra.graph.model.EdgeDO">
        MATCH (v1)-[e :${ edgeType }]->(v2)
        WHERE id(v1) == '${ fromVertexId }' and id(v2) == '${ toVertexId }'
        RETURN type(e) as type ,
        id(v1) as fromVertexId, tags(v1)[0] as fromType ,
        id(v2) as toVertexId, tags(v1)[0] as toType ,
        properties(e).ctime as createTime
    </select>

    <select id="queryEdgeBiDirection" resultType="com.wt.test.wolverine.infra.graph.model.EdgeDO">
        MATCH p = (v1)-[e ${ edgeTypes }]-(v2)
        WHERE id(v1) == '${ vertexAId }' and id(v2) == '${ vertexBId }'
        RETURN type(e) as type ,
        src(e) as fromVertexId, tags(startNode(p))[0] as fromType ,
        dst(e) as toVertexId, tags(endNode(p))[0] as toType ,
        properties(e).ctime as createTime
    </select>

    <select id="getEdgeCount">
        MATCH (v1)-[e :${ edgeType }]->(v2)
        WHERE 1 == 1
        @if ( isNotEmpty(  fromVertexId  ) ) {
        and id(v1) == '${ fromVertexId }'
        @}
        @if ( isNotEmpty( toVertexId ) ) {
        and id(v2) == '${ toVertexId }'
        @}
        RETURN count(e)
    </select>

    <select id="queryEdge" resultType="com.wt.test.wolverine.infra.graph.model.EdgeDO">
        MATCH (v1)-[e :${ edgeType }]->(v2)
        WHERE 1 == 1
        @if ( isNotEmpty( fromVertexId ) ) {
        and id(v1) == '${ fromVertexId }'
        @}
        @if ( isNotEmpty( toVertexId ) ) {
        and id(v2) == '${ toVertexId }'
        @}
        RETURN type(e) as type ,
        id(v1) as fromVertexId, tags(v1)[0] as fromType ,
        id(v2) as toVertexId, tags(v1)[0] as toType ,
        properties(e).ctime as createTime
        order by createTime desc
        skip ${ offset } limit ${ limit }
    </select>

    <select id="edgeInOut" resultType="com.wt.test.wolverine.infra.graph.model.EdgeDO">
        MATCH p = (v)-[e :${ edgeType }]-()
        WHERE id(v) == '${ vertexId }'
        RETURN type(e) as type ,
        src(e) as fromVertexId, tags(startNode(p))[0] as fromType ,
        dst(e) as toVertexId, tags(endNode(p))[0] as toType ,
        properties(e).ctime as createTime
    </select>

    <select id="edgeInOutCount" resultType="com.wt.test.wolverine.infra.graph.model.EdgeCountDO">
        MATCH  (v1)-[e1 :${ edgeType } ]->() WHERE id(v1) == '${ vertexId }'
        MATCH  ()-[e2 :${ edgeType } ]->(v2) WHERE id(v2) == '${ vertexId }'
        return count(distinct e1) as outCount , count(distinct e2) as inCount
    </select>

</mapper>